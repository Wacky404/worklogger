#!/opt/homebrew/bin/python3
"""
MAIN FILE FOR WORKLOGGER
author: Wacky404
email: wacky404@dev.com
"""

import datetime
from datetime import timezone
import json
import sys
import os
import os.path as osp
import logging
import paths_util as pu
from funcs_worklogger import configure, add_log, arg_convert
from args_worklogger import parser
from pathlib import Path
from log_util_worklogger import logger, setup_logging


SAVEPATH: Path | str
BACKUPPATH: Path | str
CONFIGPATH: Path | str

formats: dict = {
    "TEXT": '.txt',
    "JSON": '.json',
    "CSV": '.csv'
}

# creates a NameSpace of arguments that were made
args = parser.parse_args()

if args.configure:
    configure(dir_list=None)
    logger.info("Configuration completed.")
    sys.exit()

numeric_loglevel = getattr(logging, str(args.log).upper())
if isinstance(numeric_loglevel, int):
    setup_logging(numeric_loglevel)
else:
    setup_logging()


dotfile: list | None = None
if osp.exists(osp.join(os.getcwd(), os.pardir)):
    dotfile = list(Path(osp.join(os.getcwd(), os.pardir)).glob(
        '**/*.workloggerconfig.json'))
    if len(dotfile) > 1:
        logger.error(
            f"You have {len(dotfile)} config files, using defaults...")
        dotfile = None
    else:
        logger.debug(f"Using user config file in {str(dotfile[0])}")

settings: dict | None = None
if dotfile is not None:
    with open(dotfile[0], 'r') as fd:
        try:
            settings = json.load(fd)
        except Exception as e:
            logger.exception(str(e))
            if args.verbose:
                print("There was an error loading your config.")
                print("Using defaults")

if settings is not None:
    SAVEPATH = Path(osp.join(osp.expanduser("~"), settings['savepath']))
    BACKUPPATH = Path(osp.join(osp.expanduser("~"), settings['backuppath']))
    CONFIGPATH = Path(osp.join(osp.expanduser("~"), settings['configpath']))
    numeric_loglevel_settings = getattr(
        logging, str(settings['loglvl']).upper())
    setup_logging(numeric_loglevel_settings)
    dir_list: list = [d for d in [
        SAVEPATH, BACKUPPATH, CONFIGPATH] if not osp.exists(d)]
    if len(dir_list) > 0:
        configure(dir_list=dir_list)


jname_proj: dict[str, dict] = {}
if settings is not None:
    for j in settings['jobs']:
        jname_proj[str(j['name']).upper()] = j['projects'][0]
    logger.debug(f"{jname_proj}")

    for name, projs in jname_proj.items():
        projs_new: dict[str, str] = {}
        for key, proj in projs.items():
            projs_new[str(key).upper()] = proj
        projs = projs_new

        jname_proj[name] = projs
    logger.debug(f"{jname_proj}")

try:
    for name in jname_proj.keys():
        filepath = osp.join(SAVEPATH, f"{name}.txt")
        filepath_backup = osp.join(BACKUPPATH, f"{name}.txt")
        if not osp.exists(filepath):
            with open(filepath, 'x'):
                pass
        if not osp.exists(filepath_backup):
            with open(filepath_backup, 'x'):
                pass
except Exception as e:
    logger.exception(str(e))

if settings is not None:
    add_log(file_format=formats[str(
        settings['fileformat']).upper()], proj_settings=jname_proj, savepath=SAVEPATH, backuppath=BACKUPPATH, job=args.job, proj=args.project,
        loc=args.location, time=args.time, start=args.start, end=args.end, message=args.message)
else:
    add_log(file_format=None, proj_settings=None,
            savepath=SAVEPATH, backuppath=BACKUPPATH, job=args.job, proj=args.project,
            loc=args.location, time=args.time, start=args.start, end=args.end, message=args.message)
